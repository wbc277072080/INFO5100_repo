/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Car;
import Business.CarInfoList;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wangbaichao
 */
public class ManageCarPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCarPanel
     */
    private CarInfoList carInfoList;
    private JPanel rightPanel;

    ManageCarPanel(JPanel rightPanel, CarInfoList carInfoList) {
        initComponents();
        this.carInfoList = carInfoList;
        this.rightPanel=rightPanel;
        populate();
        populateCombo();
    }
    
    public void populate(){
        DefaultTableModel dtm = (DefaultTableModel)tblCarInfoList.getModel();
        dtm.setRowCount(0);
        
        for(Car a : carInfoList.getCarInfoList()){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=a;
            row[1]=a.getModel_num();
            row[2]=a.getSerial_num();
            row[3]=a.isAvailable();
            dtm.addRow(row);
        }
    }
    
    public void populateCombo(){
        
        //brand Combo
        ArrayList<String> brandList=new ArrayList<>();
        brandList=carInfoList.getBrandList();
        for(String b:brandList){
            brandCombo.addItem(b);
        }
        
        //year combo
        ArrayList<String> yearList=new ArrayList<>();
        yearList=carInfoList.getYearList();
        for(String y:yearList){
            yearCombo.addItem(y);
        }
        
        //city combo
        ArrayList<String> cityList=new ArrayList<>();
        cityList=carInfoList.getCityList();
        for(String c:cityList){
            cityCombo.addItem(c);
        }
        
        //serialNum combo
        ArrayList<String> serialNumList=new ArrayList<>();
        serialNumList=carInfoList.getSerialNumList();
        for(String s:serialNumList){
            serialNumCombo.addItem(s);
        }
        
        //model combo
        ArrayList<String> modelNumList=new ArrayList<>();
        modelNumList=carInfoList.getModelNumList();
        for(String m:modelNumList){
            modelNumCombo.addItem(m);
        }
        
//        //brand2 combo
//        ArrayList<String> brand2List=new ArrayList<>();
//        brand2List=carInfoList.getBrandList();
//        for(String b:brand2List){
//            brand2Combo.addItem(b);
//        }
        
//        //max seat combo
//        ArrayList<String> seatList=new ArrayList<>();
//        seatList=carInfoList.getSeatList();
//        for(String s:seatList){
//            seatCombo.addItem(s);
//        }
        
        
    }
    
    private void recordUpdateTime() {
        //Create an instance of SimpleDateFormat used for formatting
        DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        // Get the date today using Calendar object.
        Date today = Calendar.getInstance().getTime();
        // Using DateFormat format method we can create a string 
        // representation of a date with the defined format.
        String todayDate = df.format(today);
        carInfoList.setUpdateDate(todayDate);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionButtonGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCarInfoList = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCheck = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        rbtnCheck1 = new javax.swing.JRadioButton();
        rbtnCheck2 = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSearchResult = new javax.swing.JTable();
        rbtnCheck3 = new javax.swing.JRadioButton();
        rbtnCheck4 = new javax.swing.JRadioButton();
        rbtnCheck5 = new javax.swing.JRadioButton();
        rbtnCheck6 = new javax.swing.JRadioButton();
        rbtnCheck7 = new javax.swing.JRadioButton();
        rbtnCheck8 = new javax.swing.JRadioButton();
        rbtnCheck9 = new javax.swing.JRadioButton();
        rbtnCheck10 = new javax.swing.JRadioButton();
        rbtnCheck11 = new javax.swing.JRadioButton();
        txtSeatX = new javax.swing.JTextField();
        txtSeatY = new javax.swing.JTextField();
        xLabel = new javax.swing.JLabel();
        yLabel = new javax.swing.JLabel();
        brandCombo = new javax.swing.JComboBox<>();
        yearCombo = new javax.swing.JComboBox<>();
        cityCombo = new javax.swing.JComboBox<>();
        serialNumCombo = new javax.swing.JComboBox<>();
        modelNumCombo = new javax.swing.JComboBox<>();
        btnSecondary = new javax.swing.JButton();

        tblCarInfoList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand", "Model Number", "Serial Number", "Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCarInfoList);

        btnView.setText("View Detail");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCheck.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnCheck.setText("Check");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        questionButtonGroup.add(rbtnCheck1);
        rbtnCheck1.setText("Check first available car");

        questionButtonGroup.add(rbtnCheck2);
        rbtnCheck2.setText("Check how many available/unavailable car");

        tblSearchResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Available", "Brand", "Manufactured Year", "Min Seats", "Max Seats", "Serial Number", "Model Number", "Available City", "Maintenance Certificate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSearchResult.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(tblSearchResult);

        questionButtonGroup.add(rbtnCheck3);
        rbtnCheck3.setText("Check car by given brand");
        rbtnCheck3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnCheck3ActionPerformed(evt);
            }
        });

        questionButtonGroup.add(rbtnCheck4);
        rbtnCheck4.setText("Check car by given manufactured year");

        questionButtonGroup.add(rbtnCheck5);
        rbtnCheck5.setText("Find an available car with >= x seats but <= y seats.");

        questionButtonGroup.add(rbtnCheck6);
        rbtnCheck6.setText("Check car by given serial number");

        questionButtonGroup.add(rbtnCheck7);
        rbtnCheck7.setText("Check car by given model number");

        questionButtonGroup.add(rbtnCheck8);
        rbtnCheck8.setText("List all the car manufacturers");

        questionButtonGroup.add(rbtnCheck9);
        rbtnCheck9.setText("When was the last time carInfoList updated");

        questionButtonGroup.add(rbtnCheck10);
        rbtnCheck10.setText("List all available cars in a given city");

        questionButtonGroup.add(rbtnCheck11);
        rbtnCheck11.setText("List all cars that have expired maintenance certificate");

        xLabel.setText("min");

        yLabel.setText("max");

        brandCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandComboActionPerformed(evt);
            }
        });

        yearCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearComboActionPerformed(evt);
            }
        });

        cityCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboActionPerformed(evt);
            }
        });

        serialNumCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialNumComboActionPerformed(evt);
            }
        });

        modelNumCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelNumComboActionPerformed(evt);
            }
        });

        btnSecondary.setText("secondary check");
        btnSecondary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSecondaryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbtnCheck3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(rbtnCheck1)
                                        .addComponent(rbtnCheck2))
                                    .addGap(91, 91, 91))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(rbtnCheck4)
                                    .addGap(42, 42, 42)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(brandCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(xLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtSeatX, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(yLabel)
                                    .addGap(3, 3, 3)
                                    .addComponent(txtSeatY, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(rbtnCheck5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rbtnCheck8)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbtnCheck7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(modelNumCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rbtnCheck9)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbtnCheck10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cityCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rbtnCheck11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbtnCheck6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(serialNumCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSecondary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRefresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(80, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(rbtnCheck1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnCheck2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnCheck3)
                            .addComponent(brandCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnCheck4)
                            .addComponent(yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnCheck5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSeatX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSeatY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xLabel)
                            .addComponent(yLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefresh)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnCheck6)
                            .addComponent(serialNumCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnCheck7)
                            .addComponent(modelNumCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnCheck8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnCheck9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnCheck10)
                            .addComponent(cityCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnCheck11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSecondary))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCarInfoList.getSelectedRow();

        if(selectedRow>=0){
            Car car= (Car) tblCarInfoList.getValueAt(selectedRow,0);
            ViewPanel panel= new ViewPanel(this.rightPanel,car,this.carInfoList);
            this.rightPanel.add("viewPanel",panel);
            CardLayout layout = (CardLayout) this.rightPanel.getLayout();
            layout.next(rightPanel);
            populate();

        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Delete the selected airplane object
        int selectedRow = tblCarInfoList.getSelectedRow();

        if (selectedRow >= 0 ) {
            Car car = (Car)tblCarInfoList.getValueAt(selectedRow, 0);
            carInfoList.deleteCar(car);
            JOptionPane.showMessageDialog(null,"Car has been deleted. ");
            recordUpdateTime();
            populate();
        }
        else
        JOptionPane.showMessageDialog(null,"Please select any row");
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populate();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void rbtnCheck3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnCheck3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnCheck3ActionPerformed

    
    
    
    
    
    
    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        // TODO add your handling code here:
        
        //CarInfoList resultCarInfoList = new CarInfoList();
        
        // Validate the radio button selection status.
        try {questionButtonGroup.getSelection().equals(rbtnCheck1.getModel());}
        catch (Exception e) {
            JOptionPane.showMessageDialog(null,"Please select a question to search.");
        }
        
        //1.Find me the first available passenger car.
        if(questionButtonGroup.getSelection().equals(rbtnCheck1.getModel())) {
            Car result1 = carInfoList.SearchFirstAvailable();
            if(result1 == null){
                JOptionPane.showMessageDialog(null, "Available car is not exist","Warning",JOptionPane.INFORMATION_MESSAGE);
            }
        else{
            DefaultTableModel dtm = (DefaultTableModel)tblSearchResult.getModel();
            dtm.setRowCount(0);
        
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=result1.isAvailable();
            row[1]=result1;
            row[2]=result1.getManufactured_year();
            row[3]=result1.getMin_seats();
            row[4]=result1.getMax_seats();
            row[5]=result1.getSerial_num();
            row[6]=result1.getModel_num();
            row[7]=result1.getAvailble_city();
            row[8]=result1.isMaintenance_certificate();
             
            dtm.addRow(row);
        }
        }
        
        //2.How many cars are currently available. How many are not.
        if(questionButtonGroup.getSelection().equals(rbtnCheck2.getModel())) {
            int [] result2=carInfoList.CountAvailableOrNot();
            
            String availCount = result2[0]+" cars are available. ";
            String unAvailCount = "\n"+result2[1] + "cars are unavailable.";
            
            JOptionPane.showMessageDialog(null,availCount+unAvailCount); 
            
        }
        
        //3.List all cars that are made by Toyota, GM, etc.
        if(questionButtonGroup.getSelection().equals(rbtnCheck3.getModel())) {
            String selectBrand = String.valueOf(brandCombo.getSelectedItem());
            ArrayList<Car> brandList = carInfoList.searchCarbyBrand(selectBrand);
            int n =brandList.size();
            if(n==0){
                JOptionPane.showMessageDialog(null,"There is no car in the CarInfoList"); 
            }
            DefaultTableModel dtm = (DefaultTableModel)tblSearchResult.getModel();
            dtm.setRowCount(0);
            
            for(Car car:brandList){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
         
        }
        
        //4.List all cars that were manufactured in a given year, ‘x’.
        if(questionButtonGroup.getSelection().equals(rbtnCheck4.getModel())) {
            String selectYear = String.valueOf(yearCombo.getSelectedItem());
            ArrayList<Car> yearList = carInfoList.searchCarbyYear(Integer.parseInt(selectYear));
            int n =yearList.size();
            if(n==0){
                JOptionPane.showMessageDialog(null,"There is no car in the CarInfoList"); 
            }
            DefaultTableModel dtm = (DefaultTableModel)tblSearchResult.getModel();
            dtm.setRowCount(0);
            
            for(Car car:yearList){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
         
        }
        
        //5.Find an available car with a minimum of x seats but no more than y seats.
        if(questionButtonGroup.getSelection().equals(rbtnCheck5.getModel())) {
            int minSeat=Integer.parseInt(txtSeatX.getText());
            int maxSeat=Integer.parseInt(txtSeatY.getText());
            
            if(minSeat>maxSeat){
                JOptionPane.showMessageDialog(null,"Min should be smaller than max!"); 
            }
            ArrayList<Car> seatList = carInfoList.searchCarbySeat(minSeat,maxSeat);
            int n =seatList.size();
            if(n==0){
                JOptionPane.showMessageDialog(null,"There is no car with seats between "+String.valueOf(minSeat)+" and "+String.valueOf(maxSeat)); 
            }
            DefaultTableModel dtm = (DefaultTableModel)tblSearchResult.getModel();
            dtm.setRowCount(0);
            
            for(Car car:seatList){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
        }
        
        //6.Find a car with the given serial number. List the attributes of the found car.
        if(questionButtonGroup.getSelection().equals(rbtnCheck6.getModel())) {
            String serialNum = String.valueOf(serialNumCombo.getSelectedItem());
            
            ArrayList<Car> serialNumList = carInfoList.searchCarbySerialNum(Integer.parseInt(serialNum));
            int n =serialNumList.size();
            if(n==0){
                JOptionPane.showMessageDialog(null,"There is no car with serial Number: "+serialNum); 
            }
            DefaultTableModel dtm = (DefaultTableModel)tblSearchResult.getModel();
            dtm.setRowCount(0);
            
            for(Car car:serialNumList){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
        }
        
        //7.List all cars given the model number.
        if(questionButtonGroup.getSelection().equals(rbtnCheck7.getModel())) {
            String modelNum = String.valueOf(modelNumCombo.getSelectedItem());
            
            ArrayList<Car> modelNumList = carInfoList.searchCarbyModelNum(modelNum);
            int n =modelNumList.size();
            if(n==0){
                JOptionPane.showMessageDialog(null,"There is no car with model Number: "+modelNum); 
            }
            DefaultTableModel dtm = (DefaultTableModel)tblSearchResult.getModel();
            dtm.setRowCount(0);
            
            for(Car car:modelNumList){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
        }
        
        //8.List all the car manufacturers used by the (this) Uber.
        if(questionButtonGroup.getSelection().equals(rbtnCheck8.getModel())) {
            ArrayList<String> result8=carInfoList.allBrand();
            
            int n=result8.size();
            String res="";
            for(int i=0;i<n;i++){
                res+=result8.get(i)+"\n";
            }

            JOptionPane.showMessageDialog(null,"Here is the list of manufacturers: \n"+res); 
            
        }
        
        //9.When was the last time the fleet catalog was updated.
        if(questionButtonGroup.getSelection().equals(rbtnCheck9.getModel())) {
            String result9=carInfoList.getUpdateDate();

            JOptionPane.showMessageDialog(null,"The last time the fleet catalog was updated is "+result9); 
            
        }
        
        //10.List all cars that are available in a given city.
        if(questionButtonGroup.getSelection().equals(rbtnCheck10.getModel())) {
            String city = String.valueOf(cityCombo.getSelectedItem());
            
            ArrayList<Car> cityList = carInfoList.searchCarbyCity(city);
            int n =cityList.size();
            if(n==0){
                JOptionPane.showMessageDialog(null,"There is no car available in: "+city); 
            }
            DefaultTableModel dtm = (DefaultTableModel)tblSearchResult.getModel();
            dtm.setRowCount(0);
            
            for(Car car:cityList){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
        }
        
        //11.List all cars that have expired maintenance certificate.
        if(questionButtonGroup.getSelection().equals(rbtnCheck11.getModel())) {       
            ArrayList<Car> expiredList = carInfoList.allExpired();
            int n =expiredList.size();
            if(n==0){
                JOptionPane.showMessageDialog(null,"There is no car has expired maintenance certificate"); 
            }
            DefaultTableModel dtm = (DefaultTableModel)tblSearchResult.getModel();
            dtm.setRowCount(0);
            
            for(Car car:expiredList){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
        }
        
//        //12 secondary filter
//        if(questionButtonGroup.getSelection().equals(rbtnCheck12.getModel())) {       
//            
//            String brand2 = String.valueOf(brand2Combo.getSelectedItem());
//            
//            ArrayList<Car> tempListCar = new ArrayList<>();
//            
//            ArrayList<Car> brand2List = new ArrayList<>();
//            
//            DefaultTableModel dtm = (DefaultTableModel)tblSearchResult.getModel();
//            
//            int n = dtm.getRowCount();
//            
//            //get tempListCar
//            for(int i=0;i<n;i++){
//                ArrayList<String> tempList = new ArrayList<>();
//                for(int j=0;j<9;j++){
//                    tempList.add(String.valueOf(tblSearchResult.getValueAt(i,j)));
//                }
//                boolean avail=Boolean.parseBoolean(tempList.get(0));                
//                String bran=tempList.get(1);
//                int manuYear=Integer.parseInt(tempList.get(2));
//                int minS=Integer.parseInt(tempList.get(3));
//                int maxS=Integer.parseInt(tempList.get(4));
//                int serial=Integer.parseInt(tempList.get(5));
//                String model=tempList.get(6);
//                String availC=tempList.get(7);
//                boolean maintain=Boolean.parseBoolean(tempList.get(8));
//                        
//                Car car= new Car(avail,bran,manuYear,minS,maxS,serial,model,availC,maintain);
//                
//                tempListCar.add(car);
//            }
//                 
//            for(Car car : tempListCar){
//                if(car.getBrand()==brand2){
//                    brand2List.add(car);
//            }
//        }
//              
//            dtm.setRowCount(0);
//            
//            for(Car car:brand2List){
//                Object[] row = new Object[dtm.getColumnCount()];
//                row[0]=car.isAvailable();
//                row[1]=car;
//                row[2]=car.getManufactured_year();
//                row[3]=car.getMin_seats();
//                row[4]=car.getMax_seats();
//                row[5]=car.getSerial_num();
//                row[6]=car.getModel_num();
//                row[7]=car.getAvailble_city();
//                row[8]=car.isMaintenance_certificate();
//                dtm.addRow(row);
//            }
//        }
        
        
        
        
        
        
        
        
        
        
        
        
    
      
    }//GEN-LAST:event_btnCheckActionPerformed

    private void brandComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brandComboActionPerformed

    private void yearComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearComboActionPerformed

    private void cityComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityComboActionPerformed

    private void serialNumComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialNumComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serialNumComboActionPerformed

    private void modelNumComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelNumComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modelNumComboActionPerformed

    private void btnSecondaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSecondaryActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> tempListCar = new ArrayList<>();
        
        DefaultTableModel dtm = (DefaultTableModel)tblSearchResult.getModel();
        
        int n = dtm.getRowCount();
        
        
        //get tempListCar
            for(int i=0;i<n;i++){
                ArrayList<String> tempList = new ArrayList<>();
                for(int j=0;j<9;j++){
                    tempList.add(String.valueOf(tblSearchResult.getValueAt(i,j)));
                }
                boolean avail=Boolean.parseBoolean(tempList.get(0));                
                String bran=tempList.get(1);
                int manuYear=Integer.parseInt(tempList.get(2));
                int minS=Integer.parseInt(tempList.get(3));
                int maxS=Integer.parseInt(tempList.get(4));
                int serial=Integer.parseInt(tempList.get(5));
                String model=tempList.get(6);
                String availC=tempList.get(7);
                boolean maintain=Boolean.parseBoolean(tempList.get(8));
                        
                Car car= new Car(avail,bran,manuYear,minS,maxS,serial,model,availC,maintain);
                
                tempListCar.add(car);
            }
            
            // Validate the radio button selection status.
        try {questionButtonGroup.getSelection().equals(rbtnCheck1.getModel());}
        catch (Exception e) {
            JOptionPane.showMessageDialog(null,"Please select a question to search.");
        }
        
        //1.Find me the first available passenger car.
        
        
        if(questionButtonGroup.getSelection().equals(rbtnCheck1.getModel())) {
            
            ArrayList<Car> result1=new ArrayList<>();
            for(Car car: tempListCar){
                if(car.isAvailable()==true){
                    result1.add(car);
                    break;
                }
            }
            
            Car car1 =result1.get(0);
            if(result1 == null){
                JOptionPane.showMessageDialog(null, "Available car is not exist","Warning",JOptionPane.INFORMATION_MESSAGE);
            }
            else{
            dtm.setRowCount(0);
        
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=car1.isAvailable();
            row[1]=car1;
            row[2]=car1.getManufactured_year();
            row[3]=car1.getMin_seats();
            row[4]=car1.getMax_seats();
            row[5]=car1.getSerial_num();
            row[6]=car1.getModel_num();
            row[7]=car1.getAvailble_city();
            row[8]=car1.isMaintenance_certificate();
             
            dtm.addRow(row);
        }
        }
        
        //2.How many cars are currently available. How many are not.
        if(questionButtonGroup.getSelection().equals(rbtnCheck2.getModel())) {
            
            
            int avail=0;
            int noavail=0;
            for(Car car : tempListCar){
                if(car.isAvailable()==true) avail++;
                else noavail++;
        }
            int [] result2 ={avail,noavail};
            
            String availCount = result2[0]+" cars are available. ";
            String unAvailCount = "\n"+result2[1] + "cars are unavailable.";
            
            JOptionPane.showMessageDialog(null,availCount+unAvailCount); 
            
        }
        
        //3.List all cars that are made by Toyota, GM, etc.
        if(questionButtonGroup.getSelection().equals(rbtnCheck3.getModel())) {
            
            String selectBrand = String.valueOf(brandCombo.getSelectedItem());
            
            ArrayList<Car> result3 =new ArrayList<>();
        
            for(Car car : tempListCar){
                if(car.getBrand().equalsIgnoreCase(selectBrand)){
                    result3.add(car);
                }
            }
            
            int n3 =result3.size();
            if(n3==0){
                JOptionPane.showMessageDialog(null,"There is no car in the CarInfoList"); 
            }
            
            dtm.setRowCount(0);
            
            for(Car car:result3){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
         
        }
        
        //4.List all cars that were manufactured in a given year, ‘x’.
        if(questionButtonGroup.getSelection().equals(rbtnCheck4.getModel())) {
            String selectYear = String.valueOf(yearCombo.getSelectedItem());
            
            ArrayList<Car> result4 =new ArrayList<>();
        
            for(Car car : tempListCar){
                if(car.getManufactured_year()==Integer.parseInt(selectYear)){
                    result4.add(car);
                }
            }
            
            int n4 =result4.size();
            if(n4==0){
                JOptionPane.showMessageDialog(null,"There is no car in the CarInfoList"); 
            }
            dtm.setRowCount(0);
            
            for(Car car:result4){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
         
        }
        
        //5.Find an available car with a minimum of x seats but no more than y seats.
        if(questionButtonGroup.getSelection().equals(rbtnCheck5.getModel())) {
            
            int minSeat=Integer.parseInt(txtSeatX.getText());
            int maxSeat=Integer.parseInt(txtSeatY.getText());
            
            
            if(minSeat>maxSeat){
                JOptionPane.showMessageDialog(null,"Min should be smaller than max!"); 
            }
                      
            ArrayList<Car> result5 =new ArrayList<>();
        
            for(Car car : tempListCar){
                if(car.getMin_seats()>=minSeat&&car.getMax_seats()<=maxSeat){
                    result5.add(car);
                }
            }
            
            
            int n5 =result5.size();
            if(n5==0){
                JOptionPane.showMessageDialog(null,"There is no car with seats between "+String.valueOf(minSeat)+" and "+String.valueOf(maxSeat)); 
            }
            dtm.setRowCount(0);
            
            for(Car car:result5){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
        }
        
        //6.Find a car with the given serial number. List the attributes of the found car.
        if(questionButtonGroup.getSelection().equals(rbtnCheck6.getModel())) {
            String serialNum = String.valueOf(serialNumCombo.getSelectedItem());
          
            
            ArrayList<Car> result6 =new ArrayList<>();
        
            for(Car car : tempListCar){
                if(car.getSerial_num()==Integer.parseInt(serialNum)){
                    result6.add(car);
                }
            }
            
            int n6 =result6.size();
            if(n6==0){
                JOptionPane.showMessageDialog(null,"There is no car with serial Number: "+serialNum); 
            }
            dtm.setRowCount(0);
            
            for(Car car:result6){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
        }
        
        //7.List all cars given the model number.
        if(questionButtonGroup.getSelection().equals(rbtnCheck7.getModel())) {
            String modelNum = String.valueOf(modelNumCombo.getSelectedItem());
           
            
            ArrayList<Car> result7 =new ArrayList<>();
        
            for(Car car : tempListCar){
                if(car.getModel_num()==modelNum){
                    result7.add(car);
                }
            }
            
            
            int n7 =result7.size();
            if(n7==0){
                JOptionPane.showMessageDialog(null,"There is no car with model Number: "+modelNum); 
            }
            dtm.setRowCount(0);
            
            for(Car car:result7){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
        }
        
        //8.List all the car manufacturers used by the (this) Uber.
        if(questionButtonGroup.getSelection().equals(rbtnCheck8.getModel())) {
            
            ArrayList<String> result8=new ArrayList<>();
        
            for(Car car : tempListCar){
                String b = car.getBrand();
                if(!result8.contains(b)){
                    result8.add(b);
            }
        }
            
            int n8=result8.size();
            String res="";
            for(int i=0;i<n;i++){
                res+=result8.get(i)+"\n";
            }

            JOptionPane.showMessageDialog(null,"Here is the list of manufacturers: \n"+res); 
            
        }
        
        //9.When was the last time the fleet catalog was updated.
        if(questionButtonGroup.getSelection().equals(rbtnCheck9.getModel())) {
            String result9=carInfoList.getUpdateDate();

            JOptionPane.showMessageDialog(null,"The last time the fleet catalog was updated is "+result9); 
            
        }
        
        //10.List all cars that are available in a given city.
        if(questionButtonGroup.getSelection().equals(rbtnCheck10.getModel())) {
            String city = String.valueOf(cityCombo.getSelectedItem());
        
            
            ArrayList<Car> result10 =new ArrayList<>();
        
            for(Car car : tempListCar){
                if(car.getAvailble_city()==city&&car.isAvailable()==true){
                    result10.add(car);
                }
            }
            
            
            int n10 =result10.size();
            if(n10==0){
                JOptionPane.showMessageDialog(null,"There is no car available in: "+city); 
            }
            dtm.setRowCount(0);
            
            for(Car car:result10){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
        }
        
        //11.List all cars that have expired maintenance certificate.
        if(questionButtonGroup.getSelection().equals(rbtnCheck11.getModel())) {       

            
            ArrayList<Car> result11=new ArrayList<>();
        
            for(Car car : tempListCar){
                if(car.isMaintenance_certificate()==false){
                    result11.add(car);
                }
            }
            int n11 =result11.size();
            if(n11==0){
                JOptionPane.showMessageDialog(null,"There is no car has expired maintenance certificate"); 
            }
            dtm.setRowCount(0);
            
            for(Car car:result11){
                Object[] row = new Object[dtm.getColumnCount()];
                row[0]=car.isAvailable();
                row[1]=car;
                row[2]=car.getManufactured_year();
                row[3]=car.getMin_seats();
                row[4]=car.getMax_seats();
                row[5]=car.getSerial_num();
                row[6]=car.getModel_num();
                row[7]=car.getAvailble_city();
                row[8]=car.isMaintenance_certificate();
                dtm.addRow(row);
            }
        }
            
        
        
    }//GEN-LAST:event_btnSecondaryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> brandCombo;
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSecondary;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> cityCombo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> modelNumCombo;
    private javax.swing.ButtonGroup questionButtonGroup;
    private javax.swing.JRadioButton rbtnCheck1;
    private javax.swing.JRadioButton rbtnCheck10;
    private javax.swing.JRadioButton rbtnCheck11;
    private javax.swing.JRadioButton rbtnCheck2;
    private javax.swing.JRadioButton rbtnCheck3;
    private javax.swing.JRadioButton rbtnCheck4;
    private javax.swing.JRadioButton rbtnCheck5;
    private javax.swing.JRadioButton rbtnCheck6;
    private javax.swing.JRadioButton rbtnCheck7;
    private javax.swing.JRadioButton rbtnCheck8;
    private javax.swing.JRadioButton rbtnCheck9;
    private javax.swing.JComboBox<String> serialNumCombo;
    private javax.swing.JTable tblCarInfoList;
    private javax.swing.JTable tblSearchResult;
    private javax.swing.JTextField txtSeatX;
    private javax.swing.JTextField txtSeatY;
    private javax.swing.JLabel xLabel;
    private javax.swing.JLabel yLabel;
    private javax.swing.JComboBox<String> yearCombo;
    // End of variables declaration//GEN-END:variables
}
